#+TITLE: SICP 2.2.4 assignment
#+AUTHOR: Tristan de Cacqueray
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* Building Abstractions with Data
** A Picture Language

*** My custom painters

To make it more fun, I wrote a little tool to convert SVG path to painter
object, resulting in:

#+CAPTION: Generated by: ((square-limit fedora-logo-painter 4) unit-frame)
#+NAME:   fig:fedora-logo-square-limit
[[./fedora-logo-square-limit.png]]


**** Svg2Painter.py
I wrote a little svg path to painter object converter:
#+BEGIN_SRC python
from xml.dom.minidom import parse
import sys
try:
    pathNode = parse(open(sys.argv[1])).getElementsByTagName('path')[0]
except:
    print("Couldn't find path...")
    raise
path = pathNode.getAttribute('d')
segmentsRaw = path.split("M")
segments = []
for segment in segmentsRaw[1:]:
    segments.append(
        list(map(lambda x: list(map(float, x.split())),
                 segment.split("L")[1:])))
min_x, min_y = 1e5, 1e5
max_x, max_y = 0., 0.
for segment in segments:
    for x, y in segment:
        if x < min_x: min_x = x
        if x > max_x: max_x = x
        if y < min_y: min_y = y
        if y > max_y: max_y = y

# Scale a bit
max_x -= (min_x * 0.9)
max_y -= (min_y * 0.9)

max_x *= 1.1
max_y *= 1.1

def normalize_x(x):
    return (x - min_x * 0.9) / max_x
def normalize_y(y):
    return (y - min_y * 0.9) / max_y
print("(define path-painter")
print("  (segments->painter")
print("    (list")
for segment in segments:
    for pos in range(len(segment)):
        try:
            start = segment[pos]
            end = segment[pos+1]
        except IndexError:
            end = segment[0]
        print("    (make-segment (make-vect %.4f %.4f) (make-vect %.4f %.4f))" % (
            normalize_x(start[0]), normalize_y(start[1]),
            normalize_x(end[0]), normalize_y(end[1])))
print(")))")
#+END_SRC

It assumes the SVG file has only one path, composed of L (lineto). Using Inkscape:
- Stroke to path
- Extensions -> Modify path -> Flatten beziers
- Extensions -> Modify path -> Straighten Segments
- Make segments line
- Save until the path has only L (lineto) segment

**** Fedora logo painter
#+BEGIN_SRC scheme
(define fedora-logo-painter
  (segments->painter
   (list
    (make-segment (make-vect 0.6284 0.0075) (make-vect 0.6032 0.0114))
    (make-segment (make-vect 0.6032 0.0114) (make-vect 0.5788 0.0177))
    (make-segment (make-vect 0.5788 0.0177) (make-vect 0.5555 0.0264))
    (make-segment (make-vect 0.5555 0.0264) (make-vect 0.5332 0.0372))
    (make-segment (make-vect 0.5332 0.0372) (make-vect 0.5122 0.0500))
    (make-segment (make-vect 0.5122 0.0500) (make-vect 0.4926 0.0648))
    (make-segment (make-vect 0.4926 0.0648) (make-vect 0.4745 0.0813))
    (make-segment (make-vect 0.4745 0.0813) (make-vect 0.4580 0.0995))
    (make-segment (make-vect 0.4580 0.0995) (make-vect 0.4433 0.1192))
    (make-segment (make-vect 0.4433 0.1192) (make-vect 0.4305 0.1403))
    (make-segment (make-vect 0.4305 0.1403) (make-vect 0.4197 0.1626))
    (make-segment (make-vect 0.4197 0.1626) (make-vect 0.4111 0.1860))
    (make-segment (make-vect 0.4111 0.1860) (make-vect 0.4048 0.2105))
    (make-segment (make-vect 0.4048 0.2105) (make-vect 0.4009 0.2358))
    (make-segment (make-vect 0.4009 0.2358) (make-vect 0.3996 0.2618))
    (make-segment (make-vect 0.3996 0.2618) (make-vect 0.3996 0.3978))
    (make-segment (make-vect 0.3996 0.3978) (make-vect 0.2640 0.3978))
    (make-segment (make-vect 0.2640 0.3978) (make-vect 0.2381 0.3992))
    (make-segment (make-vect 0.2381 0.3992) (make-vect 0.2129 0.4031))
    (make-segment (make-vect 0.2129 0.4031) (make-vect 0.1885 0.4094))
    (make-segment (make-vect 0.1885 0.4094) (make-vect 0.1651 0.4180))
    (make-segment (make-vect 0.1651 0.4180) (make-vect 0.1429 0.4288))
    (make-segment (make-vect 0.1429 0.4288) (make-vect 0.1219 0.4417))
    (make-segment (make-vect 0.1219 0.4417) (make-vect 0.1022 0.4565))
    (make-segment (make-vect 0.1022 0.4565) (make-vect 0.0841 0.4730))
    (make-segment (make-vect 0.0841 0.4730) (make-vect 0.0676 0.4912))
    (make-segment (make-vect 0.0676 0.4912) (make-vect 0.0529 0.5109))
    (make-segment (make-vect 0.0529 0.5109) (make-vect 0.0401 0.5319))
    (make-segment (make-vect 0.0401 0.5319) (make-vect 0.0293 0.5543))
    (make-segment (make-vect 0.0293 0.5543) (make-vect 0.0207 0.5777))
    (make-segment (make-vect 0.0207 0.5777) (make-vect 0.0144 0.6022))
    (make-segment (make-vect 0.0144 0.6022) (make-vect 0.0105 0.6274))
    (make-segment (make-vect 0.0105 0.6274) (make-vect 0.0092 0.6535))
    (make-segment (make-vect 0.0092 0.6535) (make-vect 0.0105 0.6795))
    (make-segment (make-vect 0.0105 0.6795) (make-vect 0.0144 0.7048))
    (make-segment (make-vect 0.0144 0.7048) (make-vect 0.0207 0.7292))
    (make-segment (make-vect 0.0207 0.7292) (make-vect 0.0293 0.7527))
    (make-segment (make-vect 0.0293 0.7527) (make-vect 0.0401 0.7750))
    (make-segment (make-vect 0.0401 0.7750) (make-vect 0.0529 0.7961))
    (make-segment (make-vect 0.0529 0.7961) (make-vect 0.0676 0.8158))
    (make-segment (make-vect 0.0676 0.8158) (make-vect 0.0841 0.8339))
    (make-segment (make-vect 0.0841 0.8339) (make-vect 0.1022 0.8505))
    (make-segment (make-vect 0.1022 0.8505) (make-vect 0.1219 0.8652))
    (make-segment (make-vect 0.1219 0.8652) (make-vect 0.1429 0.8781))
    (make-segment (make-vect 0.1429 0.8781) (make-vect 0.1651 0.8889))
    (make-segment (make-vect 0.1651 0.8889) (make-vect 0.1885 0.8975))
    (make-segment (make-vect 0.1885 0.8975) (make-vect 0.2129 0.9039))
    (make-segment (make-vect 0.2129 0.9039) (make-vect 0.2381 0.9078))
    (make-segment (make-vect 0.2381 0.9078) (make-vect 0.2640 0.9091))
    (make-segment (make-vect 0.2640 0.9091) (make-vect 0.2899 0.9078))
    (make-segment (make-vect 0.2899 0.9078) (make-vect 0.3151 0.9039))
    (make-segment (make-vect 0.3151 0.9039) (make-vect 0.3395 0.8975))
    (make-segment (make-vect 0.3395 0.8975) (make-vect 0.3628 0.8889))
    (make-segment (make-vect 0.3628 0.8889) (make-vect 0.3851 0.8781))
    (make-segment (make-vect 0.3851 0.8781) (make-vect 0.4061 0.8652))
    (make-segment (make-vect 0.4061 0.8652) (make-vect 0.4257 0.8505))
    (make-segment (make-vect 0.4257 0.8505) (make-vect 0.4439 0.8339))
    (make-segment (make-vect 0.4439 0.8339) (make-vect 0.4603 0.8158))
    (make-segment (make-vect 0.4603 0.8158) (make-vect 0.4750 0.7961))
    (make-segment (make-vect 0.4750 0.7961) (make-vect 0.4878 0.7750))
    (make-segment (make-vect 0.4878 0.7750) (make-vect 0.4986 0.7527))
    (make-segment (make-vect 0.4986 0.7527) (make-vect 0.5072 0.7292))
    (make-segment (make-vect 0.5072 0.7292) (make-vect 0.5135 0.7048))
    (make-segment (make-vect 0.5135 0.7048) (make-vect 0.5174 0.6795))
    (make-segment (make-vect 0.5174 0.6795) (make-vect 0.5187 0.6535))
    (make-segment (make-vect 0.5187 0.6535) (make-vect 0.5187 0.5174))
    (make-segment (make-vect 0.5187 0.5174) (make-vect 0.5851 0.5183))
    (make-segment (make-vect 0.5851 0.5183) (make-vect 0.6170 0.5177))
    (make-segment (make-vect 0.6170 0.5177) (make-vect 0.6479 0.5161))
    (make-segment (make-vect 0.6479 0.5161) (make-vect 0.6777 0.5131))
    (make-segment (make-vect 0.6777 0.5131) (make-vect 0.7063 0.5084))
    (make-segment (make-vect 0.7063 0.5084) (make-vect 0.7336 0.5019))
    (make-segment (make-vect 0.7336 0.5019) (make-vect 0.7467 0.4979))
    (make-segment (make-vect 0.7467 0.4979) (make-vect 0.7595 0.4933))
    (make-segment (make-vect 0.7595 0.4933) (make-vect 0.7719 0.4881))
    (make-segment (make-vect 0.7719 0.4881) (make-vect 0.7839 0.4822))
    (make-segment (make-vect 0.7839 0.4822) (make-vect 0.7955 0.4756))
    (make-segment (make-vect 0.7955 0.4756) (make-vect 0.8066 0.4684))
    (make-segment (make-vect 0.8066 0.4684) (make-vect 0.8174 0.4604))
    (make-segment (make-vect 0.8174 0.4604) (make-vect 0.8277 0.4516))
    (make-segment (make-vect 0.8277 0.4516) (make-vect 0.8376 0.4420))
    (make-segment (make-vect 0.8376 0.4420) (make-vect 0.8470 0.4315))
    (make-segment (make-vect 0.8470 0.4315) (make-vect 0.8559 0.4202))
    (make-segment (make-vect 0.8559 0.4202) (make-vect 0.8643 0.4079))
    (make-segment (make-vect 0.8643 0.4079) (make-vect 0.8723 0.3947))
    (make-segment (make-vect 0.8723 0.3947) (make-vect 0.8797 0.3805))
    (make-segment (make-vect 0.8797 0.3805) (make-vect 0.8865 0.3653))
    (make-segment (make-vect 0.8865 0.3653) (make-vect 0.8929 0.3490))
    (make-segment (make-vect 0.8929 0.3490) (make-vect 0.8987 0.3316))
    (make-segment (make-vect 0.8987 0.3316) (make-vect 0.9039 0.3131))
    (make-segment (make-vect 0.9039 0.3131) (make-vect 0.9078 0.2878))
    (make-segment (make-vect 0.9078 0.2878) (make-vect 0.9091 0.2618))
    (make-segment (make-vect 0.9091 0.2618) (make-vect 0.9078 0.2358))
    (make-segment (make-vect 0.9078 0.2358) (make-vect 0.9039 0.2105))
    (make-segment (make-vect 0.9039 0.2105) (make-vect 0.8976 0.1860))
    (make-segment (make-vect 0.8976 0.1860) (make-vect 0.8890 0.1626))
    (make-segment (make-vect 0.8890 0.1626) (make-vect 0.8782 0.1403))
    (make-segment (make-vect 0.8782 0.1403) (make-vect 0.8654 0.1192))
    (make-segment (make-vect 0.8654 0.1192) (make-vect 0.8507 0.0995))
    (make-segment (make-vect 0.8507 0.0995) (make-vect 0.8342 0.0813))
    (make-segment (make-vect 0.8342 0.0813) (make-vect 0.8161 0.0648))
    (make-segment (make-vect 0.8161 0.0648) (make-vect 0.7964 0.0500))
    (make-segment (make-vect 0.7964 0.0500) (make-vect 0.7754 0.0372))
    (make-segment (make-vect 0.7754 0.0372) (make-vect 0.7532 0.0264))
    (make-segment (make-vect 0.7532 0.0264) (make-vect 0.7298 0.0177))
    (make-segment (make-vect 0.7298 0.0177) (make-vect 0.7055 0.0114))
    (make-segment (make-vect 0.7055 0.0114) (make-vect 0.6803 0.0075))
    (make-segment (make-vect 0.6803 0.0075) (make-vect 0.6543 0.0062))
    (make-segment (make-vect 0.6543 0.0062) (make-vect 0.6284 0.0075))
    (make-segment (make-vect 0.6683 0.1264) (make-vect 0.6818 0.1285))
    (make-segment (make-vect 0.6818 0.1285) (make-vect 0.6949 0.1318))
    (make-segment (make-vect 0.6949 0.1318) (make-vect 0.7074 0.1363))
    (make-segment (make-vect 0.7074 0.1363) (make-vect 0.7192 0.1420))
    (make-segment (make-vect 0.7192 0.1420) (make-vect 0.7304 0.1488))
    (make-segment (make-vect 0.7304 0.1488) (make-vect 0.7408 0.1566))
    (make-segment (make-vect 0.7408 0.1566) (make-vect 0.7504 0.1654))
    (make-segment (make-vect 0.7504 0.1654) (make-vect 0.7592 0.1750))
    (make-segment (make-vect 0.7592 0.1750) (make-vect 0.7669 0.1855))
    (make-segment (make-vect 0.7669 0.1855) (make-vect 0.7737 0.1967))
    (make-segment (make-vect 0.7737 0.1967) (make-vect 0.7794 0.2086))
    (make-segment (make-vect 0.7794 0.2086) (make-vect 0.7839 0.2211))
    (make-segment (make-vect 0.7839 0.2211) (make-vect 0.7872 0.2342))
    (make-segment (make-vect 0.7872 0.2342) (make-vect 0.7892 0.2478))
    (make-segment (make-vect 0.7892 0.2478) (make-vect 0.7899 0.2618))
    (make-segment (make-vect 0.7899 0.2618) (make-vect 0.7892 0.2758))
    (make-segment (make-vect 0.7892 0.2758) (make-vect 0.7872 0.2894))
    (make-segment (make-vect 0.7872 0.2894) (make-vect 0.7839 0.3025))
    (make-segment (make-vect 0.7839 0.3025) (make-vect 0.7794 0.3150))
    (make-segment (make-vect 0.7794 0.3150) (make-vect 0.7737 0.3269))
    (make-segment (make-vect 0.7737 0.3269) (make-vect 0.7686 0.3353))
    (make-segment (make-vect 0.7686 0.3353) (make-vect 0.7631 0.3431))
    (make-segment (make-vect 0.7631 0.3431) (make-vect 0.7574 0.3502))
    (make-segment (make-vect 0.7574 0.3502) (make-vect 0.7513 0.3567))
    (make-segment (make-vect 0.7513 0.3567) (make-vect 0.7383 0.3681))
    (make-segment (make-vect 0.7383 0.3681) (make-vect 0.7244 0.3773))
    (make-segment (make-vect 0.7244 0.3773) (make-vect 0.7095 0.3847))
    (make-segment (make-vect 0.7095 0.3847) (make-vect 0.6938 0.3903))
    (make-segment (make-vect 0.6938 0.3903) (make-vect 0.6774 0.3945))
    (make-segment (make-vect 0.6774 0.3945) (make-vect 0.6605 0.3973))
    (make-segment (make-vect 0.6605 0.3973) (make-vect 0.6432 0.3991))
    (make-segment (make-vect 0.6432 0.3991) (make-vect 0.6255 0.4000))
    (make-segment (make-vect 0.6255 0.4000) (make-vect 0.5895 0.3999))
    (make-segment (make-vect 0.5895 0.3999) (make-vect 0.5536 0.3986))
    (make-segment (make-vect 0.5536 0.3986) (make-vect 0.5187 0.3978))
    (make-segment (make-vect 0.5187 0.3978) (make-vect 0.5187 0.2618))
    (make-segment (make-vect 0.5187 0.2618) (make-vect 0.5194 0.2478))
    (make-segment (make-vect 0.5194 0.2478) (make-vect 0.5215 0.2342))
    (make-segment (make-vect 0.5215 0.2342) (make-vect 0.5248 0.2211))
    (make-segment (make-vect 0.5248 0.2211) (make-vect 0.5293 0.2086))
    (make-segment (make-vect 0.5293 0.2086) (make-vect 0.5350 0.1967))
    (make-segment (make-vect 0.5350 0.1967) (make-vect 0.5417 0.1855))
    (make-segment (make-vect 0.5417 0.1855) (make-vect 0.5495 0.1750))
    (make-segment (make-vect 0.5495 0.1750) (make-vect 0.5582 0.1654))
    (make-segment (make-vect 0.5582 0.1654) (make-vect 0.5678 0.1566))
    (make-segment (make-vect 0.5678 0.1566) (make-vect 0.5782 0.1488))
    (make-segment (make-vect 0.5782 0.1488) (make-vect 0.5894 0.1420))
    (make-segment (make-vect 0.5894 0.1420) (make-vect 0.6013 0.1363))
    (make-segment (make-vect 0.6013 0.1363) (make-vect 0.6138 0.1318))
    (make-segment (make-vect 0.6138 0.1318) (make-vect 0.6268 0.1285))
    (make-segment (make-vect 0.6268 0.1285) (make-vect 0.6404 0.1264))
    (make-segment (make-vect 0.6404 0.1264) (make-vect 0.6543 0.1257))
    (make-segment (make-vect 0.6543 0.1257) (make-vect 0.6683 0.1264))
    (make-segment (make-vect 0.3996 0.5174) (make-vect 0.3996 0.6535))
    (make-segment (make-vect 0.3996 0.6535) (make-vect 0.3989 0.6675))
    (make-segment (make-vect 0.3989 0.6675) (make-vect 0.3968 0.6811))
    (make-segment (make-vect 0.3968 0.6811) (make-vect 0.3935 0.6941))
    (make-segment (make-vect 0.3935 0.6941) (make-vect 0.3890 0.7067))
    (make-segment (make-vect 0.3890 0.7067) (make-vect 0.3833 0.7186))
    (make-segment (make-vect 0.3833 0.7186) (make-vect 0.3766 0.7298))
    (make-segment (make-vect 0.3766 0.7298) (make-vect 0.3688 0.7403))
    (make-segment (make-vect 0.3688 0.7403) (make-vect 0.3601 0.7499))
    (make-segment (make-vect 0.3601 0.7499) (make-vect 0.3505 0.7586))
    (make-segment (make-vect 0.3505 0.7586) (make-vect 0.3401 0.7665))
    (make-segment (make-vect 0.3401 0.7665) (make-vect 0.3289 0.7732))
    (make-segment (make-vect 0.3289 0.7732) (make-vect 0.3170 0.7789))
    (make-segment (make-vect 0.3170 0.7789) (make-vect 0.3045 0.7835))
    (make-segment (make-vect 0.3045 0.7835) (make-vect 0.2915 0.7868))
    (make-segment (make-vect 0.2915 0.7868) (make-vect 0.2779 0.7888))
    (make-segment (make-vect 0.2779 0.7888) (make-vect 0.2640 0.7895))
    (make-segment (make-vect 0.2640 0.7895) (make-vect 0.2500 0.7888))
    (make-segment (make-vect 0.2500 0.7888) (make-vect 0.2365 0.7868))
    (make-segment (make-vect 0.2365 0.7868) (make-vect 0.2234 0.7835))
    (make-segment (make-vect 0.2234 0.7835) (make-vect 0.2109 0.7789))
    (make-segment (make-vect 0.2109 0.7789) (make-vect 0.1991 0.7732))
    (make-segment (make-vect 0.1991 0.7732) (make-vect 0.1879 0.7665))
    (make-segment (make-vect 0.1879 0.7665) (make-vect 0.1775 0.7586))
    (make-segment (make-vect 0.1775 0.7586) (make-vect 0.1679 0.7499))
    (make-segment (make-vect 0.1679 0.7499) (make-vect 0.1592 0.7403))
    (make-segment (make-vect 0.1592 0.7403) (make-vect 0.1514 0.7298))
    (make-segment (make-vect 0.1514 0.7298) (make-vect 0.1446 0.7186))
    (make-segment (make-vect 0.1446 0.7186) (make-vect 0.1390 0.7067))
    (make-segment (make-vect 0.1390 0.7067) (make-vect 0.1344 0.6941))
    (make-segment (make-vect 0.1344 0.6941) (make-vect 0.1311 0.6811))
    (make-segment (make-vect 0.1311 0.6811) (make-vect 0.1291 0.6675))
    (make-segment (make-vect 0.1291 0.6675) (make-vect 0.1284 0.6535))
    (make-segment (make-vect 0.1284 0.6535) (make-vect 0.1291 0.6394))
    (make-segment (make-vect 0.1291 0.6394) (make-vect 0.1311 0.6259))
    (make-segment (make-vect 0.1311 0.6259) (make-vect 0.1344 0.6128))
    (make-segment (make-vect 0.1344 0.6128) (make-vect 0.1390 0.6002))
    (make-segment (make-vect 0.1390 0.6002) (make-vect 0.1446 0.5883))
    (make-segment (make-vect 0.1446 0.5883) (make-vect 0.1514 0.5771))
    (make-segment (make-vect 0.1514 0.5771) (make-vect 0.1592 0.5667))
    (make-segment (make-vect 0.1592 0.5667) (make-vect 0.1679 0.5570))
    (make-segment (make-vect 0.1679 0.5570) (make-vect 0.1775 0.5483))
    (make-segment (make-vect 0.1775 0.5483) (make-vect 0.1879 0.5405))
    (make-segment (make-vect 0.1879 0.5405) (make-vect 0.1991 0.5337))
    (make-segment (make-vect 0.1991 0.5337) (make-vect 0.2109 0.5280))
    (make-segment (make-vect 0.2109 0.5280) (make-vect 0.2234 0.5235))
    (make-segment (make-vect 0.2234 0.5235) (make-vect 0.2365 0.5202))
    (make-segment (make-vect 0.2365 0.5202) (make-vect 0.2500 0.5181))
    (make-segment (make-vect 0.2500 0.5181) (make-vect 0.2640 0.5174))
    (make-segment (make-vect 0.2640 0.5174) (make-vect 0.3996 0.5174))))
#+END_SRC

*** Exercise 2.44

Define the procedure up-split

#+BEGIN_SRC scheme
(define (up-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (up-split painter (- n 1))))
        (below painter (beside smaller smaller)))))
#+END_SRC

[[./fedora-logo-up-split.png]]
*** Exercise 2.45
Define the procedure split

#+BEGIN_SRC scheme
(define (split main-op sub-op)
  (lambda (painter n)
    (if (= n 0)
        painter
        (let ((smaller ((split main-op sub-op) painter (- n 1))))
          (main-op painter (sub-op smaller smaller))))))
(define right-split (split beside below))
(define up-split (split below beside))
#+END_SRC

[[./fedora-logo-right-split.png]]

*** Exercise 2.46

Define vectors procedures

#+BEGIN_SRC scheme
(define (make-vect x y) (cons x y))
(define (xcor-vect v) (car v))
(define (ycor-vect v) (cdr v))
(define (op-vect op u v) (make-vect (op (xcor-vect u) (xcor-vect v))
                                    (op (ycor-vect u) (ycor-vect v))))
(define (add-vect u v) (op-vect + u v))
(define (sub-vect u v) (op-vect - u v))
(define (scale-vect u s) (make-vect (* (xcor-vect u) s) (* (ycor-vect u) s)))
#+END_SRC

*** Exercise 2.47

Define frame selector for the following implementation

#+BEGIN_SRC scheme
(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (origin-frame f) (car f))
(define (edge1-frame f) (cadr f))
(define (edge2-frame f) (caddr f))

(define (make-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))
(define (origin-frame f) (car f))
(define (edge1-frame f) (cadr f))
(define (edge2-frame f) (cddr f))
#+END_SRC

*** Exercise 2.48

Define make-segment

#+BEGIN_SRC scheme
(define (make-segment u v) (cons u v))
(define (start-segment s)  (car s))
(define (end-segment seg)  (cdr s))
#+END_SRC

*** Exercise 2.49

Define some painters:

#+BEGIN_SRC scheme
(define outline-painter (segments->painter
  (list
    (make-segment (make-vect 0.0 0.0) (make-vect 0.0 1.0))
    (make-segment (make-vect 0.0 1.0) (make-vect 1.0 1.0))
    (make-segment (make-vect 1.0 1.0) (make-vect 1.0 0.0))
    (make-segment (make-vect 1.0 0.0) (make-vect 0.0 0.0))))

(define x-painter (segments->painter
  (list
    (make-segment (make-vect 0.0 0.0) (make-vect 1.0 1.0))
    (make-segment (make-vect 0.0 1.0) (make-vect 1.0 0.0))))

(define diamond-painter (segments->painter
  (list
    (make-segment (make-vect 0.5 0.0) (make-vect 0.0 0.5))
    (make-segment (make-vect 0.0 0.5) (make-vect 0.5 1.0))
    (make-segment (make-vect 0.5 1.0) (make-vect 1.0 0.5))
    (make-segment (make-vect 1.0 0.5) (make-vect 0.5 0.0))))


#+END_SRC

*** Exercise 2.50

Define some transformations:

#+BEGIN_SRC scheme
(define (flip-horiz painter)
  (transform-painter painter
                     (make-vect 1.0 0.0)
                     (make-vect 0.0 0.0)
                     (make-vect 1.0 1.0)))

(define (rotate-counter-180 painter)
  (transform-painter painter
                     (make-vect 1.0 1.0)
                     (make-vect 0.0 1.0)
                     (make-vect 1.0 0.0)))

(define (rotate-counter-270 painter)
  (transform-painter painter
                     (make-vect 1.0 0.0)
                     (make-vect 1.0 1.0)
                     (make-vect 0.0 0.0)))
#+END_SRC

*** Exercise 2.51

Define 2 below operations:

#+BEGIN_SRC scheme
(define (below1 painter1 painter2)
  (let ((split-point (make-vect 0.0 0.5)))
    (let ((paint-up
           (transform-painter painter1
                              (make-vect 0.0 0.0)
                              (make-vect 1.0 0.0)
                              split-point))
          (paint-bottom
           (transform-painter painter2
                              split-point
                              (make-vect 1.0 0.5)
                              (make-vect 0.0 1.0))))
      (lambda (frame)
        (paint-up frame)
        (paint-bottom frame)))))

(define (below2 painter1 painter2)
  (define (rotate90 painter)
    (transform-painter painter
                       (make-vect 1.0 0.0)
                       (make-vect 1.0 1.0)
                       (make-vect 0.0 0.0)))
  (define (rotate270 painter)
    (transform-painter painter
                       (make-vect 0.0 1.0)
                       (make-vect 0.0 0.0)
                       (make-vect 1.0 1.0)))
  (rotate90 (beside (rotate270 painter1) (rotate270 painter2))))
#+END_SRC

*** Exercise 2.52

#+BEGIN_SRC scheme
  (define (smiling-wave frame)
     (wave frame)
     ((segments->painter
        (list
          ;; Lower mouth
          (make-segment (make-vect 0.41 0.82) (make-vect 0.44 0.8))
          (make-segment (make-vect 0.44 0.8) (make-vect 0.46 0.8))
          (make-segment (make-vect 0.46 0.8) (make-vect 0.49 0.82))
          ;; Upper mouth
          (make-segment (make-vect 0.41 0.82) (make-vect 0.44 0.805))
          (make-segment (make-vect 0.44 0.805) (make-vect 0.46 0.805))
          (make-segment (make-vect 0.46 0.805) (make-vect 0.49 0.82))
          ;; Nose
          (make-segment (make-vect 0.44 0.84) (make-vect 0.45 0.84))
          (make-segment (make-vect 0.44 0.84) (make-vect 0.45 0.87))))
      frame)
#+END_SRC

[[./smiling-george.png]]


#+BEGIN_SRC scheme
(define (corner-split-2 painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
            (right (right-split painter (- n 1))))
        (let ((top-left (beside up up))
              (bottom-right (below right right))
              (corner (corner-split painter (- n 1))))
          (beside (below painter up)
                  (below right corner))))))
#+END_SRC
[[./corner-split-2.png]]


#+BEGIN_SRC scheme
(define (corner-split painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
            (right (right-split painter (- n 1))))
        (let ((top-left (beside up up))
              (bottom-right (below right right))
              (corner (corner-split painter (- n 1))))
          (beside (below (flip-horiz painter) top-left)
                  (below bottom-right corner))))))
#+END_SRC

[[./fedora-logo-square-limit-flipped.png]]
