*** Exercise 1.1
10
12
3
6
19
false
4
16
6
44

*** Exercise 1.2

(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) 
    (* 3 (* (- 6 2) (- 2 7))))

*** Exercise 1.3

(define (sum-square-greater x y z)
        (if (>= x y) 
            (if (>= y z)
            (+ (* x x) (* y y))
            (+ (* x x) (* z z)))
            (if (>= x z) 
            (+ (* x x) (* y y))
            (+ (* y y) (* z z))
            )))
            
*** Exercise 1.5

Applicative-order: Infinite loop as the interpreter tries to define (p) as itself.
Normal-order:  
(test 0 (p))
=> (if (= 0 0) 0 (p))
=> (p)
=> p
=> Value of Compound Procedure P


*** Exercise 1.7
(define (try prev-guess guess x)
         (if (is-good-enough prev-guess guess)
            guess
            (try guess (improve guess) x)
         ))
         
(define (is-good-enough prev-guess guess) 
        ((< (- guess prev-guess) 0.1 )))

(define (improve guess x) 
        ((/ (+ guess (/ x guess)) 2)))
        
(define (square-root x)
    (try 0 1 x))

*** Exercise 1.8
